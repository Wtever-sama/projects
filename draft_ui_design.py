# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'draft.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# %%
import sys  
from PyQt5 import QtCore, QtGui, QtWidgets  
import pandas as pd  
from PyQt5.QtWidgets import QFileDialog, QTextEdit,QVBoxLayout,QDialog
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas  
from matplotlib.figure import Figure
import matplotlib.pyplot as plt 
import mplfinance as mpf 
import numpy as np  
# %%

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 678)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.read_excel_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.read_excel_label_2.setGeometry(QtCore.QRect(25, 0, 145, 109))
        self.read_excel_label_2.setObjectName("read_excel_label_2")
        self.file_path_edt_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.file_path_edt_2.setGeometry(QtCore.QRect(177, 44, 136, 21))
        self.file_path_edt_2.setObjectName("file_path_edt_2")
        self.choice_bt_2 = QtWidgets.QPushButton(self.centralwidget)
        self.choice_bt_2.setGeometry(QtCore.QRect(320, 40, 105, 30))
        self.choice_bt_2.setObjectName("choice_bt_2")
        self.checkBox_open_mean_3 = QtWidgets.QPushButton(self.centralwidget)#后期将checkbox改成pushbutton
        self.checkBox_open_mean_3.setGeometry(QtCore.QRect(380, 300, 320, 30))
        self.checkBox_open_mean_3.setObjectName("checkBox_open_mean_3")
        self.choice_pic_type_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.choice_pic_type_label_3.setGeometry(QtCore.QRect(380, 220, 261, 51))
        self.choice_pic_type_label_3.setObjectName("choice_pic_type_label_3")
        self.checkBox_all_hi_price_3 = QtWidgets.QPushButton(self.centralwidget)
        self.checkBox_all_hi_price_3.setGeometry(QtCore.QRect(380, 260, 320, 30))
        self.checkBox_all_hi_price_3.setObjectName("checkBox_all_hi_price_3")
        self.picture_type_label = QtWidgets.QLabel(self.centralwidget)
        self.picture_type_label.setGeometry(QtCore.QRect(10, 220, 261, 21))
        self.picture_type_label.setObjectName("picture_type_label")
        self.stock_read_lineedt = QtWidgets.QLineEdit(self.centralwidget)
        self.stock_read_lineedt.setGeometry(QtCore.QRect(20, 110, 359, 21))
        self.stock_read_lineedt.setText("")
        self.stock_read_lineedt.setObjectName("stock_read_lineedt")
        self.stock_read_label = QtWidgets.QLabel(self.centralwidget)
        self.stock_read_label.setGeometry(QtCore.QRect(20, 60, 359, 51))
        self.stock_read_label.setObjectName("stock_read_label")
        self.checkBox_ma = QtWidgets.QPushButton(self.centralwidget)#
        self.checkBox_ma.setGeometry(QtCore.QRect(20, 250, 320, 30))
        self.checkBox_ma.setObjectName("checkBox_ma")
        self.checkBox_kline = QtWidgets.QPushButton(self.centralwidget)#
        self.checkBox_kline.setGeometry(QtCore.QRect(20, 280, 320, 30))
        self.checkBox_kline.setObjectName("checkBox_kline")
        self.checkBox_price_upandown = QtWidgets.QPushButton(self.centralwidget)
        self.checkBox_price_upandown.setGeometry(QtCore.QRect(20, 310, 320, 30))
        self.checkBox_price_upandown.setObjectName("checkBox_price_upandown")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(440, 10, 300, 150))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        
        self.read_excel_label_2.setText(_translate("MainWindow", "Excel文件读取路径："))
        self.choice_bt_2.setText(_translate("MainWindow", "选择文件预览"))
        self.checkBox_open_mean_3.setText(_translate("MainWindow", "开盘价均值柱状图"))
        self.choice_pic_type_label_3.setText(_translate("MainWindow", "选择想要查看到数据图片类型："))
        self.checkBox_all_hi_price_3.setText(_translate("MainWindow", "每支股票达到的最高价的柱状图"))
        self.picture_type_label.setText(_translate("MainWindow", "选择你想要查看的该股票数据图类型："))
        self.stock_read_label.setText(_translate("MainWindow", "输入你想要查看的股票代号（1001~1100）："))
        self.checkBox_ma.setText(_translate("MainWindow", "移动平均线图"))
        self.checkBox_kline.setText(_translate("MainWindow", "K线图"))
        self.checkBox_price_upandown.setText(_translate("MainWindow", "价格走势折线图"))

class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):  
    def __init__(self):  
        super().__init__()  
        self.setupUi(self)  # 初始化UI窗口和控件 

        # 连接 choice_bt_2 的 clicked 信号到 open_file_dialog 槽函数 
        self.choice_bt_2.clicked.connect(self.open_file_dialog)
        #选择每支股票达到的最高价的柱状图的复选项
        self.checkBox_all_hi_price_3.clicked.connect(self.on_checkbox_changed2)#由于所有的checkbox后期改成了button,statechanged也改成clicked
        #所有开盘价均值柱状图的
        self.checkBox_open_mean_3.clicked.connect(self.on_checkbox_changed3)
        #某一只股票的
        #移动平均线图
        self.checkBox_ma.clicked.connect(self.on_checkbox_changed4)
        #K线图
        self.checkBox_kline.clicked.connect(self.on_checkbox_changed1)
        #价格走势折线图
        self.checkBox_price_upandown.clicked.connect(self.on_checkbox_changed5)

    def open_file_dialog(self):  
        # 使用 QFileDialog 打开文件对话框进行预览（仅能预览）
        self.options = QtWidgets.QFileDialog.Options()  
        self.fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self, "选择文件", "",  
                "All Files (*);;Text Files (*.txt)", options=self.options) 
        if self.fileName: 
            print("选择的文件:", self.fileName) 
            self.file_path_edt_2.setText(self.fileName)  
            # 读取Excel文件的前5行  
            df = pd.read_excel(self.fileName)  #, nrows=5
            # 将数据转换为字符串并显示在QTextEdit中  
            self.textEdit.setText(df.to_string()) 
    
    def on_checkbox_changed2(self):  #每支股票达到的最高价的柱状图   
        dialog = MyDialog2(self.fileName,self)  # 创建MyDialog2的实例  
        dialog.exec_()  # 显示对话框
    def on_checkbox_changed4(self):  #移动平均线图 checkBox_ma
        # 获取 QLineEdit 中的文本 #此处获取的是用户想要看的股票代号
        text_to_pass = self.stock_read_lineedt.text()
        if not text_to_pass:
            print('请输入文本')
        else:
            dialog = MyDialog4(text_to_pass,self.fileName,self)  # 创建MyDialog4的实例  
            dialog.exec_()  # 显示对话框
    def on_checkbox_changed1(self):  #K线图 checkBox_kline
        text_to_pass = self.stock_read_lineedt.text()
        if not text_to_pass:
            print('请输入文本')
        else:
            dialog = MyDialog1(text_to_pass,self.fileName,self)  # 创建MyDialog1的实例  
            dialog.exec_()  # 显示对话框
    def on_checkbox_changed5(self): #价格走势折线图 checkBox_price_upandown
        text_to_pass = self.stock_read_lineedt.text()
        if not text_to_pass:
            print('请输入文本')
        else:
            dialog = MyDialog5(text_to_pass,self.fileName,self)  # 创建MyDialog5的实例  
            dialog.exec_()  # 显示对话框   
    def on_checkbox_changed3(self): #所有开盘价均值柱状图的 checkBox_open_mean_3
        dialog = MyDialog3(self.fileName,self)  # 创建MyDialog3的实例  
        dialog.exec_()  # 显示对话框  

class MyDialog1(QDialog):  #创建弹窗画K线图
    def __init__(self, text_to_display,fileName, parent=None):  #text是一个str
        super(MyDialog1, self).__init__(parent)
        #全局变量（用户输入的股票代码）
        self.number=int(text_to_display)
        self.fileName=fileName

        self.setWindowTitle("Matplotlib 绘图对话框:K线图")  
        #对于某一只股票的绘图 ，K线图
        #创建第一个 matplotlib Figure 和 Canvas  
        self.fig1= Figure()
        self.canvas1=FigureCanvas(self.fig1)  
        self.ax1 = self.fig1.add_subplot(211) 
        self.ax2 = self.fig1.add_subplot(212) 
        self.ax1.set_title('Candlestick for'+text_to_display) 
        self.ax2.set_title('Volume for'+text_to_display) 
        # 有一个按钮pushButton_pic_type，点击后会调用 update_plot 方法     
        self.button_kline = QtWidgets.QPushButton('绘图', self)   
        self.button_kline.clicked.connect(self.update_plot)
        # 布局  
        layout = QVBoxLayout(self)  
        layout.addWidget(self.canvas1)   
        layout.addWidget(self.button_kline) 
        #对于所有股票的绘图，柱状
        # 创建第二个 matplotlib Figure 和 Canvas
   
    def update_plot(self): 
        df=pd.read_excel(self.fileName)
        try:
            filtered_df=df.loc[df['股票代码'] == self.number]
            stock_hfq_df0=filtered_df.iloc[:,:7]
            stock_hfq_df=stock_hfq_df0.set_index('日期')
            stock_hfq_df.index.name = 'Time'
            stock_hfq_df['Open']=stock_hfq_df['开盘价']
            stock_hfq_df['Close']=stock_hfq_df['收盘价']
            stock_hfq_df['High']=stock_hfq_df['最高价']
            stock_hfq_df['Low']=stock_hfq_df['最低价']
            stock_hfq_df['Volume']=stock_hfq_df['交易量']

            stock_hfq_df=stock_hfq_df.drop(columns=['开盘价'])
            stock_hfq_df=stock_hfq_df.drop(columns=['收盘价'])
            stock_hfq_df=stock_hfq_df.drop(columns=['最高价'])
            stock_hfq_df=stock_hfq_df.drop(columns=['最低价'])
            stock_hfq_df=stock_hfq_df.drop(columns=['交易量']) 

            #stock_hfq_df[['Open','Close', 'High', 'Low', 'Close']].plot(kind='ohlc', ax=self.ax1)
            mpf.plot(stock_hfq_df,ax=self.ax1, type='candle', style='charles', volume=self.ax2)   
            plt.subplots_adjust(hspace=3.0)# 调整子图间距
 
            #self.ax1.plot(x, y)  
            self.ax1.set_xlabel('Date')  
            self.ax1.set_ylabel('price(CNY)')  
            self.ax2.set_xlabel('Date')  
            self.ax2.set_ylabel('Volume') 
            # 刷新画布以显示新的图表  
            self.canvas1.draw()  
        except FileNotFoundError:  
            print("文件未找到，请检查文件路径是否正确。")  
  
# 假设你有一个MainWindow类或其他方式来显示这个对话框  

class MyDialog2(QDialog):  #每支股票达到的最高价的柱状图_all
    def __init__(self, fileName, parent=None):  #text是一个str
        super(MyDialog2, self).__init__(parent)
        self.filename=fileName 
        self.setWindowTitle("Matplotlib 绘图对话框")  
        #对于all股票的绘图 ，bar
        #创建第一个 matplotlib Figure 和 Canvas  
        self.fig2=Figure()
        self.canvas2 = FigureCanvas(self.fig2)  
        self.ax2 = self.fig2.add_subplot(111)  
        self.ax2.set_title('线图')  
        # 有一个按钮pushButton_pic_type，点击后会调用 update_plot 方法  
        self.btton_all_hi_price_3=QtWidgets.QPushButton('绘图', self)   
        self.btton_all_hi_price_3.clicked.connect(self.update_plot)  
        # 布局  
        layout = QVBoxLayout(self)  
        layout.addWidget(self.canvas2)   
        layout.addWidget(self.btton_all_hi_price_3) 

    def update_plot(self):  
        # 这里只是一个示例，你需要替换为实际的文件路径和数据读取逻辑  
        df=pd.read_excel(self.filename)
        try:  
            x=np.linspace(1001,1100,100)
            #每支股票达到的最高价
            lis_h=[]
            for i in range(1001,1101,1):
                #每支股票达到的最高价
                hi_filter=df.loc[(df['股票代码'])==i,['最高价']]
                max_price = pd.Series(hi_filter.get('最高价', [np.nan]), dtype=float).max()
                lis_h.append(max_price)

            self.ax2.clear()
            self.ax2.bar(x, lis_h, color='purple', label='highest price', width=0.4) 
            self.ax2.legend()  
            self.ax2.set_xlabel('股票代码', fontproperties='SimHei', fontsize=10)  
            self.ax2.set_ylabel('最高价', fontproperties='SimHei', fontsize=10)  
            self.ax2.set_title('每支股票达到的最高价的柱状图', fontproperties='SimHei', fontsize=12)   
              
            # 刷新画布以显示新的图表  
            self.canvas2.draw()  
        except FileNotFoundError:  
            print("文件未找到，请检查文件路径是否正确。")  
class MyDialog3(QDialog):  #开盘价均值柱状图_all
    def __init__(self, fileName, parent=None):  #text是一个str
        super(MyDialog3, self).__init__(parent)
        self.filename= fileName
        self.setWindowTitle("Matplotlib 绘图对话框")  
        #对于all股票的绘图 ，bar
        #创建第一个 matplotlib Figure 和 Canvas  
        self.fig3= Figure()
        self.canvas3 =FigureCanvas(self.fig3)  
        self.ax3 = self.fig3.add_subplot(111)  
        self.ax3.set_title('线图')  
        # 有一个按钮pushButton_pic_type，点击后会调用 update_plot 方法  
        self.open_mean_3=QtWidgets.QPushButton('绘图', self)  
        self.open_mean_3.clicked.connect(self.update_plot)  
        # 布局  
        layout = QVBoxLayout(self)  
        layout.addWidget(self.canvas3)   
        layout.addWidget(self.open_mean_3) 

    def update_plot(self):  
        # 这里只是一个示例，你需要替换为实际的文件路径和数据读取逻辑  
        df=pd.read_excel(self.filename)
        try:  
            x=np.linspace(1001,1100,100)
            #每支股票达到的最高价
            lis_s=[]
            for i in range(1001,1101,1):
                #开盘、收盘价均值
                filtered_df = df.loc[(df['股票代码'] == i), ['开盘价']] 
                values_df=filtered_df['开盘价'].mean()
                lis_s.append(values_df) 

            self.ax3.clear()
            self.ax3.bar(x, lis_s, color='skyblue', label='Opening price', width=0.4) 
            self.ax3.legend()  
            self.ax3.set_xlabel('股票代码', fontproperties='SimHei', fontsize=10)  
            self.ax3.set_ylabel('价格',fontname='SimHei', fontsize=10)  
            self.ax3.set_title('股市开盘价&收盘价均值柱状图',fontname='SimHei', fontsize=12)  
            # 刷新画布以显示新的图表  
            self.canvas3.draw()  
        except FileNotFoundError:  
            print("文件未找到，请检查文件路径是否正确。")  
class MyDialog4(QDialog):  #价格走势折线图
    def __init__(self,text_to_display,fileName, parent=None): 
        super(MyDialog4, self).__init__(parent)
        self.number=int(text_to_display)#全局变量
        self.filename=fileName
        self.setWindowTitle("Matplotlib 绘图对话框")  
        #对于all股票的绘图 ，bar
        #创建第一个 matplotlib Figure 和 Canvas  
        self.fig4 = Figure() 
        self.canvas4 =  FigureCanvas(self.fig4)
        self.ax4 = self.fig4.add_subplot(111)  
        self.ax4.set_title('线图')  
        # 有一个按钮pushButton_pic_type，点击后会调用 update_plot 方法  
        self.button_ma=QtWidgets.QPushButton('绘图', self) 
        self.button_ma.clicked.connect(self.update_plot) 
        # 布局  
        layout = QVBoxLayout(self)  
        layout.addWidget(self.canvas4)  
        layout.addWidget(self.button_ma)   

    def update_plot(self):  
        # 这里只是一个示例，你需要替换为实际的文件路径和数据读取逻辑  
        df=pd.read_excel(self.filename)
        try:    
            fi_dfs0= df.loc[(df['股票代码'] == self.number), ['开盘价']]#过滤出1001股票的开盘价dataframe
            fi_dfe0= df.loc[(df['股票代码'] == self.number), ['收盘价']]
            fi_dfs=fi_dfs0.reset_index(drop=True)#重置行索引，开盘
            fi_dfe=fi_dfe0.reset_index(drop=True)
            n=fi_dfs.shape[0]#n代表天数
            fdf0=df.loc[df['股票代码'] == self.number]#过滤出代号的信息
            fdf=fdf0['日期'] # 日期作为信息单独提取
            lis_p=[] # 存储走势的y轴数据
            for j in range(n):
                start=fi_dfs.iloc[j,0]
                end=fi_dfe.iloc[j,0]
                lis_p0=[start,end]
                lis_p+=lis_p0 # 按照开盘价-收盘价-第二天开盘价的1001折线趋势存储价格数据
            x1=[]
            for dat in fdf:
                x1.extend([dat]*2)#我们想要每个日期重复2次,重复日期并创建一个新的x轴列表x1 
            
            self.ax4.clear()
            self.ax4.plot(x1, lis_p, linestyle='--',label='Price trend',color='green',marker='o',markeredgecolor='orange') 
            self.ax4.legend()  
            self.ax4.set_xlabel('时间',fontname='SimHei', fontsize=10)  
            self.ax4.set_ylabel('价格',fontname='SimHei', fontsize=10)  
            self.ax4.set_title('价格走势折线图',fontname='SimHei', fontsize=12)  
            # 刷新画布以显示新的图表  
            self.canvas4.draw()  
        except FileNotFoundError:  
            print("文件未找到，请检查文件路径是否正确。")  

class MyDialog5(QDialog):    #移动平均线图 
    def __init__(self, text_to_display,fileName,parent=None): 
        super(MyDialog5, self).__init__(parent)
        self.text=text_to_display#全局变量 
        self.number=int(text_to_display)
        self.filename=fileName 
        self.setWindowTitle("Matplotlib 绘图对话框:移动平均线图")  
        #对于all股票的绘图 ，bar
        #创建第一个 matplotlib Figure 和 Canvas  
        self.fig5=Figure()
        self.canvas5 = FigureCanvas(self.fig5)  
        self.ax5= self.fig5.add_subplot(111)  
        self.ax5.set_title('线图')  
        # 有一个按钮pushButton_pic_type，点击后会调用 update_plot 方法 
        self.button_price_upandown=QtWidgets.QPushButton('绘图', self) 
        self.button_price_upandown.clicked.connect(self.update_plot)  
        # 布局  
        layout = QVBoxLayout(self)  
        layout.addWidget(self.canvas5)   
        layout.addWidget(self.button_price_upandown) 


    def update_plot(self):   
        df=pd.read_excel(self.filename)
        try: 
            fi_dfe1= df.loc[(df['股票代码'] ==self.number), ['收盘价']]#1002这支股收盘价数据
            day= df.loc[(df['股票代码'] ==self.number), ['日期']]#日期
            df2=pd.concat([day, fi_dfe1], axis=1)
            df2['lMA5'] = fi_dfe1['收盘价'].rolling(window=5).mean()
            df2['lMA10'] = fi_dfe1['收盘价'].rolling(window=10).mean()
            df2['lMA30'] = fi_dfe1['收盘价'].rolling(window=30).mean()

            golden_cross = ((df2['lMA5'].shift(1) < df2['lMA30'].shift(1)) & (df2['lMA5'] > df2['lMA30'])).idxmax() 
            golden_cross1 = ((df2['lMA5'].shift(1) < df2['lMA10'].shift(1)) & (df2['lMA5'] > df2['lMA10'])).idxmax()
            death_cross = ((df2['lMA5'].shift(1) > df2['lMA30'].shift(1)) & (df2['lMA5'] < df2['lMA30'])).idxmax() 
            death_cross1 = ((df2['lMA5'].shift(1) > df2['lMA10'].shift(1)) & (df2['lMA5'] < df2['lMA10'])).idxmax()

            self.ax5.clear()
            self.ax5.plot(df2['日期'], df2['lMA5'], label='5-Day MA', color='g')
            self.ax5.plot(df2['日期'], df2['lMA10'], label='10-Day MA', color='purple')  
            self.ax5.plot(df2['日期'], df2['lMA30'], label='30-Day MA', color='r')  
  
            # 标记交叉点 
            self.ax5.scatter(df2.loc[golden_cross1, '日期'], df2.loc[golden_cross1, 'lMA5'], color='red', label='Golden Cross of MA5&MA10') 
            self.ax5.scatter(df2.loc[golden_cross, '日期'], df2.loc[golden_cross, 'lMA5'], color='orange', label='Golden Cross of MA5&MA30')  
            self.ax5.scatter(df2.loc[death_cross1, '日期'], df2.loc[death_cross1, 'lMA5'], color='darkred', label='Death Cross of MA5&MA10', marker='x')
            self.ax5.scatter(df2.loc[death_cross, '日期'], df2.loc[death_cross, 'lMA5'], color='black', label='Death Cross of MA5&MA30', marker='x')  
    
            self.ax5.legend()  
            self.ax5.set_title('5日、10日和30日的移动平均线及其黄金和死亡交叉点',fontname='SimHei', fontsize=12)  
            self.ax5.set_xlabel('Date')  
            self.ax5.set_ylabel('Price') 
            # 刷新画布以显示新的图表  
            self.canvas5.draw() 
        except FileNotFoundError:  
            print("文件未找到，请检查文件路径是否正确。")  


if __name__ == '__main__':  
    app = QtWidgets.QApplication(sys.argv)  
    mainWindow = MainWindow()  # 创建 MainWindow 类的实例  
    mainWindow.show()  # 显示窗口  
    sys.exit(app.exec_())  # 进入主事件循环，等待用户操作

